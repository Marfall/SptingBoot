
PARENT STARTER:

        	<parent>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-parent</artifactId>
                <version>2.2.4.RELEASE</version>
                <relativePath/> <!-- lookup parent from repository -->
            </parent>

SPRING BOOT MAVEN PLUGIN:

            <build>
                <plugins>
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>

        - Helps in easily running Spring Boot applications and also it helps in creating JAR and WAR files.

PROPERTIES:

            <properties>
                <java.version>1.8</java.version>
            </properties>


SPRING BOOT MAIN CLASS:

            @SpringBootApplication
            public class WebApplication {

                public static void main(String[] args) {
                    SpringApplication.run(WebApplication.class, args);
                }
            }


            @SpringBootApplication  does 2 important things:

                - It is initilize the Spring work
                - It initializes ComponentScan
                - It initializes  AutoConfiguration


APLLICATION.PROPERTIES:

            - can uses as Apllication Config.

CHANGE LOGGING LEVEL ONLY FOR ONE PACKAGE:
        
        - in application.properties:

            logging.level.org.springframework.web=DEBUG


SPRING BOOT PARENT:

        - Spring Boot Starter Parent  extends Spring Boot Dependencies

            Why does Hot reload not work with Spring Boot DevTools and Intellij?
            Here's a quick summary of what you have to do

            Settings --> Build-Execution-Deployment --> Compiler --> enable "Make Project Automatically".
            Restart IntelliJ.
            In earlier version of IntelliJ

            Press ctrl+shift+A and search for the registry. Enable following configuration compiler.automake.allow.when.app.running

JSP VIEW RESOLVER:

    IN application.properties:

        spring.mvc.view.prefix=/WEB-INF/jsp/
        spring.mvc.view.suffix=.jsp

ADD JSP SUPPORT TO SPRING BOOT:

        <dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
		</dependency>

    
REQUEST PARAMETER:

    @RequestParam String name)   - paramerter in URL
                                http://localhost:8080/login?name=Marfall


    - When controller has some data it puts it in the model an redirects to the view,
    - The View uses the Model to render  the data on the screen


JSP EXAMPLE:


            <html>
            <head>
                <title>Web Application</title>
            </head>
            <body>
                JSP IS UP AND RUNNING! Welcome ${name}!
    Your password is ${password}
            </body>
            </html>

LOGIN CONTROLLER WITH MODELMAP:


            @Controller
            public class LoginController {

                @GetMapping("/login")
                public String loginMessage(@RequestParam String name,String password, ModelMap model) {
                    System.out.println("PARAMETER IS: " + name);
                    model.put("name", name);
                    model.put("password", password);
                    return "login";
                }
            }

        Controller says the Dispatcher Servlet: Hey, this is the Model and this is the View;
        Dispatcher Servlet goes to the View Resolver and says: Hey, View Resolver - I'm asking somebody for "login".
        View Resolver looks at the configuration and says: Ok, I know how to do that,
        So View Resolver basically maps  logical name which it gives to a physial jsp.
        The Dispatcher Servlet makes the view and the mopdel available and executes it.


SIMPLE HTML LOGIN FORM:


        <html>
        <head>
            <title>Web Application</title>
        </head>
        <body>

            <form method="post">
                Name:     <input type="text" name="name"/>
                Password  <input type="password" name="password"/>
                        <input type="submit"/>
            </form>
        </body>
        </html>


LOGIN CONTROLLER:

        @Controller
        public class LoginController {

            @GetMapping("/login")
            public String loginMessage() {

                return "login";
            }

            @PostMapping("/login")
            public String showWelcomePage(@RequestParam String name, String password, ModelMap model) {

                model.put("name", name);
                model.put("password", password);
                return "welcome";
            }
        }


SESSION, MODEL, REQUEST:

    - All request paremeters have the scope of that specific request.
    - Anything that you put in the modek - it is only until that specific request is executed
    - If you want conditional state  = you have to use something called session



            @Controller
            @SessionAttributes("name")
            public class LoginController {

                @Autowired
                LoginService service;

                @GetMapping("/login")
                public String loginMessage() {

                    return "login";
                }

                @PostMapping("/login")
                public String showWelcomePage(@RequestParam String name, String password, ModelMap model) {

                    if (!service.validateUser(name, password)) {
                        model.put("errorMessage", "Wrong credentials, try again");
                        return "login";
                    } else {
                        model.put("name", name);
                        model.put("password", password);
                        return "welcome";
                    }
                }
            }


            @Controller
            @SessionAttributes("name")
            public class ToDoController {

                @Autowired
                ToDoService service;

                @GetMapping("/list-todos")
                public String showToDos(ModelMap model) {
                    String name = (String)model.get("name");
                    model.put("todos", service.retrieveToDos(name));
                    return "list-todos";
                }

            }


ADD FORM:

            <html>
                <head>
                    <title>Add ToDo</title>
                </head>
                <body>
                ADD ToDo Page for ${name}
                <form method="post">
                    Description : <input name="desc" type="text"/>
                                <input type="submit"/>
                </form>
                </body>
            </html>

PROCESSING FORM AND REDIRECTING TO LIST:

            @GetMapping("/add-todo")
            public String addToDo(ModelMap model) {
                return "todo";
            }

            @PostMapping("/add-todo")
            public String addToDoPage(ModelMap model, @RequestParam String desc) {
                service.addTodo((String)model.get("name"), desc, new Date(), false);
                return  "redirect:/list-todos";
            }


JSTL:

            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>jstl</artifactId>
            </dependency>


            <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

            <html>
            <head>
                <title>ToDos for ${name}</title>
            </head>
                <body>
                    <h1>Your ToDos</h1>
                    <table>
                        <caption>Your ToDos are:</caption>
                        <thead>
                            <tr>
                                <th>Description</th>
                                <th>Target Date</th>
                                <th>Is it Done?</th>
                            </tr>
                        </thead>
                        <tbody>
                            <c:forEach items="${todos}" var="todo">
                                <tr>
                                    <td>${todo.desc}</td>
                                    <td>${todo.targetDate}</td>
                                    <td>${todo.done}</td>
                                </tr>
                            </c:forEach>
                        </tbody>
                    </table>
                    <br>
                    <a href="/add-todo">Add a ToDo</a>
                </body>
            </html>


BOOTSTRAP:


        WEBJARS:

            <dependency>
                <groupId>org.webjars</groupId>
                <artifactId>bootstrap</artifactId>
                <version>3.3.6</version>
            </dependency>
            <dependency>
                <groupId>org.webjars</groupId>
                <artifactId>jquery</artifactId>
                <version>1.9.1</version>
            </dependency>


                 <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

                <html>
                <head>
                    <title>ToDos for ${name}</title>
                    <link href="webjars/bootstrap/3.3.6/css/bootstrap.min.css"
                        rel="stylesheet">
                </head>
                    <body>
                        <div class="container">
                            <h1>Your ToDos</h1>
                            <table class="table table-striped">
                                <caption>Your ToDos are:</caption>
                                <thead>
                                    <tr>
                                        <th>Description</th>
                                        <th>Target Date</th>
                                        <th>Is it Done?</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <c:forEach items="${todos}" var="todo">
                                        <tr>
                                            <td>${todo.desc}</td>
                                            <td>${todo.targetDate}</td>
                                            <td>${todo.done}</td>
                                        </tr>
                                    </c:forEach>
                                </tbody>
                            </table>
                            <div>
                                <a  class="button" href="/add-todo">Add a ToDo</a>
                            </div>
                            <script src="webjars/jquery/1.9.1/jquery.min.js"></script>
                            <script src="webjars/bootstrap/3.3.6/js/bootstrap.min.js"></script>
                        </div>
                    </body>
                </html>


    DELETE WITH BUTTON:


            <a type="button" class="btn btn-warning" href="/delete-todo?id=${todo.id}">Delete</a>

                    - pass the id to controller



                <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

                <html>
                <head>
                    <title>ToDos for ${name}</title>
                    <link href="webjars/bootstrap/3.3.6/css/bootstrap.min.css"
                        rel="stylesheet">
                </head>
                    <body>
                        <div class="container">
                            <h1>Your ToDos</h1>
                            <table class="table table-striped">
                                <caption>Your ToDos are:</caption>
                                <thead>
                                    <tr>
                                        <th>Description</th>
                                        <th>Target Date</th>
                                        <th>Is it Done?</th>
                                        <th>Delete</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <c:forEach items="${todos}" var="todo">
                                        <tr>
                                            <td>${todo.desc}</td>
                                            <td>${todo.targetDate}</td>
                                            <td>${todo.done}</td>
                                            <td><a type="button" class="btn btn-warning" href="/delete-todo?id=${todo.id}">Delete</a></td>
                                        </tr>
                                    </c:forEach>
                                </tbody>
                            </table>
                            <div>
                                <a  class="button" href="/add-todo">Add a ToDo</a>
                            </div>
                            <script src="webjars/jquery/1.9.1/jquery.min.js"></script>
                            <script src="webjars/bootstrap/3.3.6/js/bootstrap.min.js"></script>
                        </div>
                    </body>
                </html>


               @GetMapping("/delete-todo")
                public String deleteToDo(@RequestParam int id) {
                    service.deleteTodo(id);
                    return "redirect:/list-todos";
                }



HTML5 FORM VALIDATON:


    <input name="desc" type="text" class="form-control" required="required"/>

        - required - not null

    

                <html>
                <head>
                    <title>Add ToDo</title>
                    <link href="webjars/bootstrap/3.3.6/css/bootstrap.min.css"
                        rel="stylesheet">
                </head>
                    <body>
                        <div class="container">
                            <form method="post">
                                <fieldset class="form-group">
                                    <label>Description</label>
                                    <input name="desc" type="text" class="form-control" required="required"/>
                                </fieldset>

                                <button type="submit" class="btn btn-success">Add</button>
                            </form>

                            <script src="webjars/jquery/1.9.1/jquery.min.js"></script>
                            <script src="webjars/bootstrap/3.3.6/js/bootstrap.min.js"></script>
                        </div>
                    </body>
                </html>


        
HIBERNATE VALIDATOR:

    - Serve Side Validation.
    - Form Backing Object or Command Bean (ModelAttribute)

    - Add Validation:
    - Use Validation on Controller
    - Display Errors in View

    - Values From Spring Form will be bound to the bean 
    - We need default constructor in model 


        <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
        <html>
        <head>
            <title>Add ToDo</title>
            <link href="webjars/bootstrap/3.3.6/css/bootstrap.min.css"
                rel="stylesheet">
        </head>
            <body>
                <div class="container">
                    <form:form method="post" modelAttribute="todo">
                        <fieldset class="form-group">
                            <form:label path="desc">Description</form:label>
                            <form:input path="desc" type="text" class="form-control" required="required"/>
                        </fieldset>

                        <button type="submit" class="btn btn-success">Add</button>
                    </form:form>


                    <script src="webjars/jquery/1.9.1/jquery.min.js"></script>
                    <script src="webjars/bootstrap/3.3.6/js/bootstrap.min.js"></script>
                </div>
            </body>
        </html>


             @GetMapping("/add-todo")
            public String addToDo(ModelMap model) {
                model.addAttribute("todo", new ToDo(0, (String)model.get("name"), "", new Date(), false));
                return "todo";
            }

           @PostMapping("/add-todo")
            public String addToDoPage(ModelMap model, ToDo todo) {
                service.addTodo((String)model.get("name"), todo.getDesc(), new Date(), false);
                return  "redirect:/list-todos";
            }


            - We must add Annotation like 
                @Size(min=10, message = "Enter at least 10 Characters...")
                private String desc;

            - And enable Validation in the Controller 
            - See javax.validation.costraints


                   @GetMapping("/add-todo")
                    public String addToDo(ModelMap model) {
                        model.addAttribute("todo", new ToDo(0, (String)model.get("name"), "Default Desc", new Date(), false));
                        return "todo";
                    }

                    @PostMapping("/add-todo")
                    public String addToDoPage(ModelMap model, @ModelAttribute("todo") @Valid  ToDo todo, BindingResult result) {
                        if (result.hasErrors()) {
                            System.out.println("ERROR!!!");
                            return "todo";
                        } else {
                            service.addTodo((String) model.get("name"), todo.getDesc(), new Date(), false);
                            return "redirect:/list-todos";
                        }
                    }



                <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
                <html>
                <head>
                    <title>Add ToDo</title>
                    <link href="webjars/bootstrap/3.3.6/css/bootstrap.min.css"
                        rel="stylesheet">
                </head>
                    <body>
                        <div class="container">
                            <form:form method="post" modelAttribute="todo">
                                <fieldset class="form-group">
                                    <form:label path="desc">Description</form:label>
                                    <form:input path="desc" type="text" class="form-control" required="required"/>
                                </fieldset>

                                <button type="submit" class="btn btn-success">Add</button>
                            </form:form>


                            <script src="webjars/jquery/1.9.1/jquery.min.js"></script>
                            <script src="webjars/bootstrap/3.3.6/js/bootstrap.min.js"></script>
                        </div>
                    </body>
                </html>



 UPDATE:

        - We must override model - equals() , hashcode()  for comparing by id:

                @Override
                public boolean equals(Object obj) {
                if (this== obj ) {
                    return true;
                }
                if (obj == null) {
                    return false;
                }
                if (getClass() != obj.getClass()) {
                    return false;
                }
                ToDo other = (ToDo) obj;
                if (id != other.id) {
                    return false;
                    }
                return true;
                }


                @Override
                public int hashCode() {
                    final int prime = 31;
                    int result = 1;
                    result = prime * result + id;
                    return result;
                }



                public ToDo retrieveToDo(int id) {
                    for (ToDo todo : todos) {
                        if (todo.getId() == id) {
                            return todo;
                        }
                    }
                    return null;
                }

                
            
                public void updateToDo(ToDo todo) {
                    todos.remove(todo);
                    todos.add(todo);                       // delete and add
                }


        - ID field in View must be hidden:


                 <body>
                    <div class="container">

                        <form:form method="post" modelAttribute="todo">
                            <form:hidden path="id"/>
                            <fieldset class="form-group">
                                <form:label path="desc">Description</form:label>
                                <form:input path="desc" type="text" class="form-control" required="required"/>
                            </fieldset>

                            <button type="submit" class="btn btn-success">Add</button>
                        </form:form>


                        <script src="webjars/jquery/1.9.1/jquery.min.js"></script>
                        <script src="webjars/bootstrap/3.3.6/js/bootstrap.min.js"></script>
                    </div>
                </body>



USE INIT-BINDER  TO HANDLE DATA-FIELDS:

    In the Controller:

        - We need dateFormat and put it in registerCustomEditor with class ande new CustomDateEditor:

            @InitBinder
            public void initBinder(WebDataBinder binder) {
                // Date - dd/MM/yyyy
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                binder.registerCustomEditor(Date.class, new CustomDateEditor(
                        dateFormat, false
                ));
            }

        @PostMapping("/add-todo")
        public String addToDoPage(ModelMap model, @ModelAttribute("todo") @Valid  ToDo todo, BindingResult result) {
            if (result.hasErrors()) {
                System.out.println("ERROR!!!");
                return "todo";
            } else {
                service.addTodo((String) model.get("name"), todo.getDesc(), todo.getTargetDate(), false);
                return "redirect:/list-todos";
            }
        }


DATE FORMAT IN JSP:

        <td>${todo.desc}</td>
        <td><fmt:formatDate value="${todo.targetDate}" pattern="dd/MM/yyyy"/>
        <td>${todo.done}</td>

        <%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>

DATE PICKER:

        <dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap-datepicker</artifactId>
			<version>1.0.1</version>
		</dependency>


         <script src = "webjars/bootstrap-datepicker/1.0.1/js/bootstrap-datepicker.js"></script>

            - script for date picker 
            - now, we need to tell which field we want added to the terget date
            - initializing date picker for the field:

                    <script>
                        $('#targetDate').datepicker({
                            format : 'dd/mm/yyyy'
                        });
                    </script>


JSP FRAGMENTS:

        <nav role="navigation" class="navbar navbar-default">
            <div class="">
                <a href="http://www.in28minutes.com" class="navbar-brand">in28Minutes</a>
            </div>
            <div class="navbar-collapse">
                <ul class="nav navbar-nav">
                    <li class="active"><a href="/login">Home</a></li>
                    <li><a href="/list-todos">Todos</a></li>

                </ul>
            </div>
        </nav>

HEADER:

        <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
        <%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
        <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
        <html>
        <head>
            <title>Add ToDo</title>
            <link href="webjars/bootstrap/3.3.6/css/bootstrap.min.css"
                rel="stylesheet">
        </head>
        <body>


NAVIGATION:

        <nav role="navigation" class="navbar navbar-default">
            <div class="">
                <a href="http://www.in28minutes.com" class="navbar-brand">in28Minutes</a>
            </div>
            <div class="navbar-collapse">
                <ul class="nav navbar-nav">
                    <li class="active"><a href="/login">Home</a></li>
                    <li><a href="/list-todos">Todos</a></li>

                </ul>
            </div>
        </nav>

FOOTER:

        <script src="webjars/jquery/1.9.1/jquery.min.js"></script>
        <script src="webjars/bootstrap/3.3.6/js/bootstrap.min.js"></script>
        <script src = "webjars/bootstrap-datepicker/1.0.1/js/bootstrap-datepicker.js"></script>
        <script>
            $('#targetDate').datepicker({
                format : 'dd/mm/yyyy'
            });
        </script>

        </body>
        </html>


WELCOME:

        <%@ include file="common/header.jspf"%>
        <%@ include file="common/navigation.jspf"%>
            <div class="container">
                WELCOME ${name}! <a href="/list-todos">Click here to manage your todos</a>
            </div>
        <%@ include file="common/footer.jspf"%>



SPRING SECURITY:


        <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

        - We need to extend SecurityCofiguration class from  WebSecurityConfigurerAdapter
        - And override methods:


     
            @Configuration
            public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

                // Create Users
                // Create a Login Form

                @Autowired
                public void configureGlobalSecurity(AuthenticationManagerBuilder auth) throws  Exception {
                    auth.inMemoryAuthentication()
                            .withUser("Marfall")
                            .password("{noop}Marfall")
                            .roles("USER","ADMIN");
                }

                @Override
                protected void configure(HttpSecurity http) throws Exception {
                    http.authorizeRequests().antMatchers("/login").permitAll()
                            .antMatchers("/", "/*todo*/**").access("hasRole('USER')").and()
                            .formLogin();
                }
            }


METHOD FOR TAKING AUTHENTICATED USER:


          private String getLoggedInUserName() {
            Object principal = SecurityContextHolder.getContext().getAuthentication()
                    .getPrincipal();
            if (principal instanceof UserDetails) {
            return  ((UserDetails) principal).getUsername();
            }
            return principal.toString();
        }

LOGOUT CONTROLLER:


        @Controller
        @SessionAttributes("name")
        public class LogoutController {

            @GetMapping("/logout")
            public String logout(HttpServletRequest request, HttpServletResponse response) {

                Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
                
                if (authentication!=null) {
                    new SecurityContextLogoutHandler().logout(request, response, authentication );
                }
                return "redirect:/";
            }
        }



